{"name":"Concordephp","tagline":"Router and Micro Framework for PHP","body":"# ConcordePHP\r\n\r\nConcordePHP is a lightweight router class for PHP that can be used as a micro framework as well.\r\n\r\nUsage:\r\n\r\n     Concorde::route(array(\r\n        '.*' => array(\r\n           'GET'=>array(\r\n\t      '/page/(\\w+)' => 'Pagecontroller->title',\r\n\t   ),\r\n\t   'POST'=>array(\r\n\t      '/myform/(\\d+)' => 'Test->myform',\r\n\t    )\r\n\t ),\r\n\t '(.*)\\.com'=>array(\r\n\t    'GET'=>array(\r\n\t       '/page/(\\w+)' => 'PagecontrollerCom->title'\r\n\t     ),\r\n\t )\t\t\r\n     ));\r\n\r\nAs you see, ConcordePHP supports multiple domains (first level of array) and request methods (second level).URL matches are passed to methods as arguments.\r\n\r\nAnother example: \r\n\r\n     Concorde::route(array(\r\n             '.*' => array(\r\n                     'GET' => array(\r\n                             '/(\\w+)/(\\d+)' => 'Controller1->show'\r\n                     )\r\n             )\r\n     ));\r\n\r\nNow when the user accesses the following url:\r\n\r\n     http://mywebsite.com/page/2\r\n\r\nThe function in Controller 1 will be called:\r\n\r\n     public function show( $module, $id ) {\r\n     ....\r\n     }\r\n\r\nConcordePHP also offers methods to easily retrieve request variables:\r\n\r\n     $router = Concorde::instance();\r\n     $router->post('name', 'anonymous'); //returns $_POST['name'] or the default if not set\r\n     $router->get('search', '');\r\n     $router->session('UID', 0);\r\n\r\n## Request Tunneling\r\n\r\nConcordePHP offers a basic method to tunnel request methods not supported by browsers:\r\n\r\n    Concorde::tunnel('PUT,DELETE','_method');\r\n\r\n## Request Simulation\r\n\r\nTo perform a request simulation:\r\n\r\n    Concorde::sim('POST:/page/1', $formData);\r\n\r\n## Reverse Routes\r\n\r\nReverse URLs cannot be inferred from regular expressions in the route data so we simply add another section to the route map:\r\n\r\n     \"~\" => array(\r\n          'preview-page' => 'preview/%s'  \r\n     )\r\n          \r\nYou can obtain the URL and fill in the parameter slot %s by\r\ninvoking this method like:\r\n\r\n     Concorde::getUrl('preview-page', array('homepage'));\r\n     //returns: /preview/homepage\r\n\r\n## Flash message\r\n\r\nFlash message. A Flash message is a session variable (_flash) that gets set for one request and then dissapears. Optionally you can pass a redirect url.\r\n\r\n     Concorde::flash('Account Created!', '/login');\r\n\r\nthis stores the message 'Account Created!' in the session and redirects to /login. when the flash method gets called again:\r\n        \r\n     $message = Concorde::flash();\r\n\r\n$message will contain the string 'Account Created!' and the session variable will be unset to prevent the message from re-occurring.\r\n\r\n## Redirect and 404\r\n\r\nTo redirect:\r\n\r\n     Concorde::redirect($url);\r\n\r\nIn case no route can be found for an URL a CRouteNotFound exeption gets thrown and you can handle this exception the way you prefer.\r\n\r\n## Other functions\r\n\r\nBesides routing, ConcordePHP can be used as a tiny framework for your PHP application.\r\nHere is an overview of the additional functionalities.\r\n\r\n### Translations\r\n\r\nConcordePHP supports basic translation functions:\r\n\r\n     Concorde::translate();\r\n\r\nReturns the text for a language key. For instance if your dictionary (see setDictionary) contains an entry like:\r\n\r\n     array( ..\r\n         'error.page-not-found' => 'Oops; page \"%s\" could not be found!'\r\n     ..)\r\n\r\n\r\nYou can obtain the proper language string like this:\r\n        \r\n     Concorde::translate('error.page-not-found',array('news'));\r\n     \r\nreturns: 'Oops; page \"news\" could not be found!'.\r\n\r\n### Configuration\r\n\r\nLoad and access configuration variables (supports dot notation):\r\n\r\n     Concorde::loadConf( $array );\r\n     Concorde::conf('database.production.dbname', $default);\r\n\r\n### Extend\r\n\r\nTo extend ConcordePHP with more functions use:\r\n\r\n    Concorde::service('greet', function(){ ... });\r\n\r\n\r\n### Proxy\r\n\r\nIf you are too lazy to type the word 'ConcordePHP' all the time, you can use the proxy:\r\n\r\n     $c = Concorde::instance();\r\n\r\nThis might be a bit slower though.\r\n\r\n### Factory\r\n\r\nIf your Controllers need to be configured before they can be used you can define a factory function to create your controllers when a route matches:\r\n\r\n     Concorde::factory( function( $controllerClassName ) { ... } );\r\n\r\n### Views\r\n\r\nConcordePHP offers a very basic view system:\r\n\r\n     $view = new ConcordeView;\r\n     $view->title = 'Hi!';\r\n     echo $view->render('path/to/view.php');\r\n\r\nIn the view:\r\n\r\n     <?php echo $this->escape($this->title); ?>\r\n\r\nHere, the view properties are just public properties and the view is a normal PHP file.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}